@{
    ViewBag.Title = "Home Page";
}
<div class="row p-t-20 m-l-20 m-r-20">
    <div class="col-lg-4 col-md-6 InfoCard ">
        <div class="card h-100">
            <div class="card-body">
                <h4 class="card-title"> Net Worth</h4>

                <div class="row justify-content-center netWorthDisplay">
                    <h2> This Months Data:</h2>
                    <h3>Expenses: $4300</h3>
                    <h3>Income: $4300</h3>
                    <h3>NetWorth: </h3>
                </div>
            </div>
        </div>
    </div>
    <div class="col-lg-4 col-md-6 AmountSpent ">
        <div class="card h-100">
            <div class="card-body">
                <h4 class="card-title"> Amount Spent This Month</h4>
                <canvas id="budget30"></canvas>

            </div>
        </div>
    </div>
    <div class="col-lg-4 col-md-6 Acounts ">
        <div class="card h-100">
            <div class="card-body ">
                <div class="accordion AccountsInfo message-center" id="AccountsInfo">


                </div>
            </div>

            <button id="btn-submit" class="btn btn-info addBankAccount" alt="default" > <i class="fa  fa-bank"></i> Add Bank Account</button>
        </div>
    </div>

</div>
<div class="row m-l-20 m-t-20  m-r-20  ">
    <div class="col-lg-4 col-md-6 HouseHoldUsers ">
        <div class="card h-100">
            <div class="card-body">
                <h4 class="card-title"> Household Members</h4>
                <div class="memberInfo message-center">

                </div>



            </div>
            <button id="btn-submit" class="btn btn-info" alt="default" data-toggle="modal" data-target="#inviteMember-modal"> <i class="fa fa-user-circle-o"></i> Invite Member</button>

        </div>
    </div>
    <div class="col-lg-4 col-md-6 Budgets ">
        <div class="card h-100">
            <div class="card-body ">
                <h4 class="card-title"> Budgets</h4>
                <div class="accordion budgetInfo message-center" id="budgetInfo">


                </div>
            </div>
            <div class=" row">
                <div class="col-6">
                    <button id="btn-submit" class="btn btn-info addBuget" alt="default"> <i class="fa fa-money"></i> Add Budget</button>
                </div>
                <div class="col-6">
                    <button id="btn-submit" class="btn btn-info addBugetItem" alt="default"> <i class="fa fa-money"></i> Add Budget Item</button>

                </div>
            </div>

        </div>
    </div>

    <div class="col-lg-4 col-md-6 BudgetsGraphs ">
        <div class="card h-100">
            <div class="card-body">
                <div id="budgetCarousel" class="carousel slide budgetCarousel" data-ride="carousel">
                    <!-- Indicators -->
                    <!-- Wrapper for slides -->
                    <div class="carousel-inner  budgetCarousel-inner" role="listbox">

                    </div>

                    <!-- Left and right controls -->
                    <a class="left carousel-control" href="#budgetCarousel" data-slide="prev">
                        <span class="fa  fa-chevron-left"></span>
                        <span class="sr-only">Previous</span>
                    </a>
                    <a class="right carousel-control" href="#budgetCarousel" data-slide="next">
                        <span class="fa  fa-chevron-right"></span>
                        <span class="sr-only">Next</span>
                    </a>
                </div>
                <ol class="carousel-indicators budgetCarousel-indicators">
                </ol>
            </div>
        </div>
    </div>
</div>
<div class="row m-l-20 m-t-20 m-r-20">

    <div class="col-lg-8 col-md-10 Transactions ">
        <div class="card">
            <div class="card-body ">
                <h4 class="card-title"> Transactions</h4>
                <div class="table-responsive ">
                    <table id="TransactionsTable" class="TransactionsTable display nowrap table table-hover table-striped table-bordered" cellspacing="0" width="100%">
                        <thead>
                            <tr>

                                <th>Created</th>
                                <th>Budget Item</th>
                                <th>Type</th>
                                <th>Amount</th>
                                <th>Memo</th>
                                <th>Action</th>

                            </tr>
                        </thead>

                    </table>

                </div>

                <button id="btn-submit" class="btn btn-info addTransaction" alt="default"> <i class="fa fa-pencil"></i> Add Transaction</button>
            </div>
        </div>
    </div>
    @*<div class="col-lg-4 col-md-6 BudgetsItemsGraphs ">
            <div class="card h-100">
                <div class="card-body">
                    <h4 class="card-title"> Budget Items</h4>
                    <div id="budgetItemCarousel" class="carousel slide budgetItemCarousel" data-ride="carousel">
                         Indicators
                         Wrapper for slides
                        <div class="carousel-inner  budgetItemCarousel-inner" role="listbox">

                        </div>

                         Left and right controls
                        <a class="left carousel-control" href="#budgetItemCarousel" data-slide="prev">
                            <span class="fa  fa-chevron-left"></span>
                            <span class="sr-only">Previous</span>
                        </a>
                        <a class="right carousel-control" href="#budgetItemCarousel" data-slide="next">
                            <span class="fa  fa-chevron-right"></span>
                            <span class="sr-only">Next</span>
                        </a>
                    </div>
                    <ol class="carousel-indicators budgetItemCarousel-indicators">
                    </ol>
                </div>
            </div>
        </div>*@
</div>

@*graphs*@
<div class="row m-l-20">
</div>


<div id="addTransaction-modal" class="modal fade " tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true" style="display: none;">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">Add Transaction</h4>
                <button type="button" class="close transactionCancel" data-dismiss="modal" aria-hidden="true">×</button>

            </div>
            <div class="modal-body">
                <div id="tranactionId" value=""></div>
                <div class="form-group">
                    <label for="recipient-name" class="control-label">Budget Itmes:</label>
                    @Html.DropDownList("BudgetsItemsList", null, new { @class = "form-control" })
                </div>
                <div class="form-group">
                    <label for="recipient-name" class="control-label">Transaction Type:</label>
                    @Html.DropDownList("TransactionType", (ViewBag.TransactionType as SelectList), htmlAttributes: new { @class = "form-control" })

                </div>
                <div class="form-group">
                    <label for="message-text" class="control-label ">Transaction Amount:</label>
                    <input class="form-control AmountText transactionInput input" id="AmountText" />
                </div>
                <div class="form-group">
                    <label for="message-text" class="control-label ">Memo:</label>
                    <textarea class="form-control memoText transactionInput input" id="memoText"></textarea>
                </div>
                <div class="form-group">
                    <div class="col-xs-12">
                        <label>Avatar Image Upload :</label>
                        <input name="TransactionFile" type="file" class=" dropify form-control" id="TransactionFile" />
                    </div>
                </div>

            </div>
            <div class="modal-footer">

                <button type="button" class="btn transactionCancel btn-default waves-effect waves-light" data-dismiss="modal">Close</button>
                <button type="button" id="transactionSubmit" class=" btn btn-danger waves-effect waves-light">Submit</button>
            </div>
        </div>
    </div>
</div>

<div id="addBankAccount-modal" class="modal fade " tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true" style="display: none;">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">Add Account</h4>
                <button type="button" class="close accountAddCancel" data-dismiss="modal" aria-hidden="true">×</button>

            </div>
            <div class="modal-body">
                <div id="bankAccountId" value=""></div>

                <div class="form-group">
                    <label for="message-text" class="control-label ">Account Name:</label>
                    <input class="form-control BankAccountName accountInput input" id="BankAccountName" />
                </div>

                <div class="form-group">
                    <label for="recipient-name" class="control-label">Account Type:</label>
                    @Html.DropDownList("AccountType", (ViewBag.AccountType as SelectList), htmlAttributes: new { @class = "form-control" })

                </div>
                <div class="form-group">
                    <label for="message-text" class="control-label ">Starting Balance :</label>
                    <input class="form-control StartingBalance accountInput input" id="StartingBalance" />
                </div>

                <div class="form-group">
                    <label for="message-text" class="control-label ">Warning Balance :</label>
                    <input class="form-control WarningBalance accountInput input" id="WarningBalance" />
                </div>

            </div>
            <div class="modal-footer">
                <button type="button" class="btn accountAddCancel btn-default waves-effect waves-light" data-dismiss="modal">Close</button>
                <button type="button" id="bankAccountSubmit" class=" btn btn-danger waves-effect waves-light">Submit</button>
            </div>
        </div>
    </div>
</div>
<div id="addBudget-modal" class="modal fade " tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true" style="display: none;">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">Add budget</h4>
                <button type="button" class="close addBudgetCancel" data-dismiss="modal" aria-hidden="true">×</button>

            </div>
            <div class="modal-body">
                <div id="budgetId" value=""></div>

                <div class="form-group">
                    <label for="message-text" class="control-label">Budget Name :</label>
                    <input class="form-control BudgetName budgetInput input" id="BudgetName" />
                </div>

                <div class="form-group">
                    <label for="recipient-name" class="control-label">Account :</label>
                    @Html.DropDownList("AccountList", null, htmlAttributes: new { @class = "form-control" })

                </div>


                <div class="form-group">
                    <label for="message-text" class="control-label ">Description :</label>
                    <textarea class="form-control budgetDescription budgetInput input" id="budgetDescription"></textarea>
                </div>

            </div>
            <div class="modal-footer">
                <button type="button" class="btn addBudgetCancel btn-default waves-effect waves-light" data-dismiss="modal">Close</button>
                <button type="button" id="budgetSubmit" class=" btn btn-danger waves-effect waves-light">Submit</button>
            </div>
        </div>
    </div>
</div>
<div id="addBudgetItem-modal" class="modal fade " tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true" style="display: none;">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">Add Budget Item</h4>
                <button type="button" class="close addBudgetCancel" data-dismiss="modal" aria-hidden="true">×</button>

            </div>
            <div class="modal-body">
                <div id="budgetItemId" value=""></div>

                <div class="form-group">
                    <label for="message-text" class="control-label">Item Name :</label>
                    <input class="form-control BudgetItemName budgetItemInput input" id="BudgetItemName" />
                </div>

                <div class="form-group">
                    <label for="recipient-name" class="control-label">Account :</label>
                    @Html.DropDownList("BudgetsList", null, htmlAttributes: new { @class = "form-control" })

                </div>
                <div class="form-group">
                    <label for="message-text" class="control-label ">Target Amount :</label>
                    <input class="form-control budgetItemTargetAmount budgetItemInput input" id="budgetItemTargetAmount"/>
                </div>

                <div class="form-group">
                    <label for="message-text" class="control-label ">Description :</label>
                    <textarea class="form-control budgetItemDescription budgetItemInput input" id="budgetItemDescription"></textarea>
                </div>

            </div>
            <div class="modal-footer">
                <button type="button" class="btn addBudgetItemCancel btn-default waves-effect waves-light" data-dismiss="modal">Close</button>
                <button type="button" id="budgetItemSubmit" class=" btn btn-danger waves-effect waves-light">Submit</button>
            </div>
        </div>
    </div>
</div>
<div id="inviteMember-modal" class="modal fade " tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true" style="display: none;">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">Invite a new Member: </h4>
                <button type="button" class="close inviteCancel" data-dismiss="modal" aria-hidden="true">×</button>

            </div>
            <div class="modal-body">
                <div class="form-group">
                    <label for="message-text" class="control-label">Email :</label>
                    <input class="form-control inviteEmail emailInput input" id="inviteEmail" />
                </div>

            </div>
            <div class="modal-footer">
                <button type="button" class="btn inviteCancel btn-default waves-effect waves-light" data-dismiss="modal">Close</button>
                <button type="button" id="inviteSubmit" class="inviteSubmit btn btn-danger waves-effect waves-light">Submit</button>
            </div>
        </div>
    </div>
</div>

@section scripts{
    <script>

        $(document).ready(function () {
            loadHouseHold();
            //load household info
            //load bankaccount
            //load budgets
            //load budgetItems
              $('.TransactionsTable').DataTable({

                dom: 'Bfrtip',
                buttons: [
                    'copy', 'csv', 'excel', 'pdf', 'print'
                ]
            });
        });

        $(".input").change(function () {
            var parent = $(this).closest('div');
            parent.removeClass("error");
            parent.find(".validationError").remove();
        });

        $('.TransactionsTable').on('click','.deleteTransaction', function () {
            deleteTransaction($(this).val());
        });
        $('.TransactionsTable').on('click', '.editTransaction', function () {
            getTranasctionInfo($(this).val());
            $('#transactionSubmit').addClass("transactionEditSubmit");
            $('#addTransaction-modal').modal('toggle');
        });
        $('.addTransaction').on('click', function () {
            $('#transactionSubmit').addClass("transactionAddSubmit");
            $('#addTransaction-modal').modal('toggle');


        });
        $('.transactionCancel').on('click', function () {
            $('.AmountText').attr("placeholder", '');
            $('.AmountText').val('');
            $('.memoText').attr("placeholder", '');
            $('.memoText').val('');
            $('#transactionSubmit').removeClass("transactionAddSubmit");
            $('#transactionSubmit').removeClass("transactionEditSubmit");

        });
        $(document).on('click', '.transactionAddSubmit',function () {
            submitTransaction(true);
        });
        $(document).on('click', '.transactionEditSubmit', function () {
            submitTransaction(false);
        });


        $(document).on('click', '.deleteBudgetItem', function () {
            deleteBudgetItem($(this).val());

        });
        $(document).on('click', '.editBudgetItem', function () {
            getBudgetItemInfo($(this).val());
            $('#budgetItemSubmit').addClass("budgetItemEditSubmit");
            $('#addBudgetItem-modal').modal('toggle');

        });
        $('.addBugetItem').on('click', function () {
            $('#budgetItemSubmit').addClass("budgetItemAddSubmit");
            $('#addBudgetItem-modal').modal('toggle');


        });
        $('.budgetItemAddCancel').on('click', function () {
            $('.BudgetItemName').val('');
            $('.BudgetItemName').attr("placeholder", '');
            $('.budgetItemDescription').val('');
            $('.budgetItemDescription').attr("placeholder", '');
            $('.budgetItemTargetAmount').val('');
            $('.budgetItemTargetAmount').attr("placeholder", '');
            $('#budgetSubmit').removeClass("budgetAddSubmit");
            $('#budgetSubmit').removeClass("budgetEditSubmit");
        });
        $(document).on('click', '.budgetItemAddSubmit', function () {
            submitBudgetItem(true);
        });
        $(document).on('click', '.budgetItemEditSubmit', function () {
            submitBudgetItem(false);
        });
        $(document).on('click', '.budgetItemBtn', function () {
            LoadTransactionsByBudgetItem($(this).val());

        });

        $('.inviteCancel').on('click', function () {
            $('.inviteEmail').val('');

        });
        $('.inviteSubmit').on('click', function () {
            if (checkValid('.inviteEmail')   )  {
                var url = '@Url.Action("InviteMember", "HomeTableChart")'
                var inviteEmail = $('.inviteEmail').val();
                $('#inviteMember-modal').modal('toggle');
                $('.inviteEmail').val('');
                $.ajax({
                    type: "POST",
                    url: url,
                    data: JSON.stringify({ 'inviteEmail': inviteEmail }),
                    dataType: 'json',
                    contentType: "application/json; charset=utf-8",
                    success: function (response) {
                        console.log(response);
                        loadHouseHoldMembers(response);
                    },
                    error: function (response) {
                        alert("Error while inserting data");
                    }

                });
            }
        });
        $(document).on('click', '.memberBtn', function () {
            LoadTransactionsByMember($(this).val());

        });

        $(document).on('click', '.deleteBudget', function () {
            deleteBudget($(this).val());

        });
        $(document).on('click', '.editBudget', function () {
            getBudgetInfo($(this).val());
            $('#budgetSubmit').addClass("budgetEditSubmit");
            $('#addBudget-modal').modal('toggle');

        });
        $('.addBuget').on('click', function () {
            $('#budgetSubmit').addClass("budgetAddSubmit");
            $('#addBudget-modal').modal('toggle');


        });
        $('.budgetAddCancel').on('click', function () {
            $('.BudgetName').val('');
            $('.BudgetName').attr("placeholder", '');
            $('.budgetDescription').val('');
            $('.budgetDescription').attr("placeholder", '');
            $('#budgetSubmit').removeClass("budgetAddSubmit");
            $('#budgetSubmit').removeClass("budgetEditSubmit");
        });
        $(document).on('click', '.budgetAddSubmit', function () {
            submitBudget(true);
        });
        $(document).on('click', '.budgetEditSubmit', function () {
            submitBudget(false);
        });
        $(document).on('click', '.budgetBtn', function () {
            LoadTransactionsByBudget($(this).val());

        });



        $(document).on('click', '.deleteBankAccount', function () {
            deleteBankAccount($(this).val());

        });
        $(document).on('click', '.editbankAccount', function () {
            getBankAccountInfo($(this).val());
            $('#bankAccountSubmit').addClass("bankAccountEditSubmit");
            $('#addBankAccount-modal').modal('toggle');

        });
        $('.addBankAccount').on('click', function () {
            $('#bankAccountSubmit').addClass("bankAccountAddSubmit");
            $('#addBankAccount-modal').modal('toggle');


        });
        $('.accountAddCancel').on('click', function () {
            $('.BankAccountName').val('');
            $('.BankAccountName').attr("placeholder", '');
            $('.StartingBalance').val('');
            $('.StartingBalance').attr("placeholder", '');
            $('.WarningBalance').val('');
            $('.WarningBalance').attr("placeholder", '');
            $('#bankAccounttSubmit').removeClass("bankAccountAddSubmit");
            $('#bankAccounttSubmit').removeClass("bankAccountEditSubmit");

        });
        $(document).on('click', '.bankAccountAddSubmit', function () {
            submitBankAccount(true);
        });
        $(document).on('click', '.bankAccountEditSubmit', function () {
            submitBankAccount(false);
        });
        $(document).on('click', '.bankAccountBtn', function () {
            LoadTransactionsByAccount($(this).val());

        });


        function loadHouseHold() {
            var url = '@Url.Action("LoadHouseHold", "HomeTableChart")'
            $.ajax({
                type: 'POST',
                url: url,
                contentType: "application/json; charset=utf-8",
                success: function (response) {
                    console.log(response)
                    //loadnetWorth(response.bankAccounts, response.transactions)
                    loadBankAccounts(response.BankAccounts);
                    loadHouseHoldMembers(response.Members);
                    loadBudgets(response.Budgets);
                    loadBudgetCharts(response.Budgets);
                    loadTransactions(response.Transactions);
                },
                error: function (response) {
                    console.log(response)

                    alert("Error while inserting data");
                }
            });
        }
        //function loadNetWorth(bankAccounts, transactions) {
        //    var netWorth = 0;
        //    var expenses = 0;
        //    var income = 0;
        //    bankAccounts.forEach(function (bankAccount) {
        //        netWorth += bankAccount.CurrentBalance;
        //    });
        //    transactions.forEach(function (transaction) {
        //        if(transaction.)
        //        netWorth += bankAccount.CurrentBalance;
        //    });

        //}
        function loadBankAccounts(bankAccounts) {
            $('.AccountsInfo').empty();
            $('.AccountsInfo').append(`<h4 class="card-title"> Accounts</h4>`);
            if (bankAccounts != null && bankAccounts.length >0) {
            bankAccounts.forEach(function (bankAccount) {
                var bankAccountDisplayColor = checkRation(bankAccount.WarningBalance, bankAccount.CurrentBalance)

                $('.AccountsInfo').append(`<div class="card">
                        <div class="card-header" id="heading${bankAccount.Id}">
                            <div class="row ">
                                <div class="col-5">
                                    <button class="btn ${bankAccountDisplayColor}" type="button" data-toggle="collapse" data-target="#collapse${bankAccount.Id}" aria-expanded="true" aria-controls="collapse${bankAccount.Id}">${bankAccount.BankAccountName} </button>
                                </div>
                                <div class="col-5">
                                   Balance $${bankAccount.CurrentBalance}
                                </div>
                                <div class="col-2">
                                        <button class="btn ${bankAccountDisplayColor}" type="button" data-toggle="collapse" data-target="#collapse${bankAccount.Id}" aria-expanded="true" aria-controls="collapse${bankAccount.Id}"><i class="fa fa-chevron-right"></i></button>

                                </div>
                            </div>

                            <div id="collapse${bankAccount.Id}" class="collapse" aria-labelledby="heading${bankAccount.Id}" data-parent="#AccountsInfo">
                                <div class="card-body">
                                    <div class="row ">
                                        <div class="col-3">
                                            <button value="${bankAccount.Id}" class="btn btn-primary editbankAccount "> <i class="fa fa-pencil-square"></i> Edit</button>

                                        </div>
                                        <div class="col-4">
                                            <button value="${bankAccount.Id}" class="btn btn-danger deleteBankAccount "><i class="fa fa-times"></i> Delete</button>

                                        </div>
                                        <div class="col-5">
                                            <button value="${bankAccount.Id}" class="btn btn-success bankAccountBtn"><i class="fa fa-dollar"></i> Tranactions</button>

                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>`
                );
            });
        }
        else {
                $('.AccountsInfo').append(`<h2>No Budgets Created</h2>
                        `);
        }
        };
            //function loadBankAccountCharts();
        function loadBudgets(Budgets) {
            $('.budgetInfo').empty();
            if (Budgets != null && Budgets.length > 0) {
                Budgets.forEach(function (budget) {
                    if (budget.Description == null) {
                        budget.Description = "No Description Available";
                    }
                    var budgetDisplayColor = checkRation(budget.CurrentAmount, budget.TargetAmount)


                    var budgetItems;
                    if (budget.BudgetItems == null || budget.BudgetItems.length < 1) {
                        budgetItems = `<p class="text-warning">No Budget Items Assigned</p>`
                    }
                    else {
                        budgetItems = ` <div class="row m-l-2">
                        <div class="col-4">
                            <h6>Budget Items</h6>
                        </div>
                        <div class="col-3">
                            <h6>Currnet</h6>
                        </div>
                        <div class="col-2">
                            <h6>Target</h6>
                        </div>

                                </div>`

                        budget.BudgetItems.forEach(function (items) {
                            var budgetItemDisplayColor = checkRation(items.CurrentAmount, items.TargetAmount)

                            budgetItems = budgetItems + `<div class="row m-l-2">
                                    <div class="col-5">
                                     <button value="${items.Id}" class="btn  budgetItemsBtn">${items.ItemName}</i></button>

                                         </div>
                                    <div class="col-2">
                                       <h6 class="${budgetItemDisplayColor}">${items.CurrentAmount}</h6>
                                    </div>
                                     <div class="col-2">
                                        <h6>${items.TargetAmount}</h6>
                                    </div>
                                    <div class="col-3">
                                         <button value="${items.Id}" class="btn btn-primary editBudgetItem " ><i class="fa fa-pencil-square"></i></button>
                                         <button value="${items.Id}" class="btn btn-danger deleteBudgetItem "><i class="fa fa-times"></i></button>
                                    </div>
                                </div>`;

                        });

                    }
                    $('.budgetInfo').append(
                        `
                    <div class="card">
                        <div class="card-header" id="heading${budget.Id}">
                            <div class="row ">
                                     <div class="col-8">
                            <h2 class="mb-0">
                                <button class="btn ${budgetDisplayColor}" type="button" data-toggle="collapse" data-target="#collapse${budget.Id}" aria-expanded="true" aria-controls="collapse${budget.Id}">
                                    ${budget.BudgetName}
                                </button>
                            </h2>
                            </div>
                            <div class="col-4">
                                 <button value="${budget.Id}" class="btn btn-primary editBudget " ><i class="fa fa-pencil-square"></i></button>
                                 <button value="${budget.Id}" class="btn btn-danger deleteBudget "><i class="fa fa-times"></i></button>
                                <button value="${budget.Id}" class="btn btn-success budgetBtn"><i class="fa fa-dollar"></i></button>
                             </div>
                           </div>
                        </div>

                        <div id="collapse${budget.Id}" class="collapse" aria-labelledby="heading${budget.Id}" data-parent="#budgetInfo">
                            <div class="card-body">
                                <div class="row ">
                                     <div class="col-6">
                                        <h5>Currnet Amount</h5>
                                    </div>
                                        <div class="col-6">
                                        <h5>Target Amount</h5>
                                    </div>
                                </div>

                                 <div class="row">
                                    <div class="col-6">
                                       <h5 class="${budgetDisplayColor}">${budget.CurrentAmount} </h5>
                                    </div>
                                     <div class="col-6">
                                        <h5>${budget.TargetAmount} </h5>
                                    </div>
                                </div>

                                    ${budgetItems}

                            </div>
                        </div>
                    </div>`
                    )
                });
            }
            else {
                $('.budgetInfo').append(`<h2>No Budgets Created</h2>
                        `);
            }
        };

        function checkRation(currentAmount, targetAmount) {
            var budgetRatio = currentAmount / targetAmount;

            if (budgetRatio >= .5 && budgetRatio < .9) {
                return  "text-warning";
            }
            else if (budgetRatio >= .9) {

                return  "text-danger";
            }
        }
        ////${budget.Description}
        function getRandomColorList(length) {
            var colors = [
                'rgba(238, 198, 67',
                'rgba(20, 20, 20)',
                'rgba(13, 33, 161)',
                'rgba(1, 22, 56)',
                'rgba(150, 2, 0)',
                'rgba(206, 108, 71)',
                'rgba(118, 146, 255)',
                'rgba(27, 44, 193)',
                'rgba(84, 101, 255)',
                'rgba(224, 255, 79)'];
            var colorList = [];
            for (var i = 0; i < length; i++) {
                var random = Math.floor(Math.random() * colors.length);
                while (colorList.includes(colors[random])) {
                    random = Math.floor(Math.random() * colors.length);

                }
                colorList.push(colors[random])

            }
            return colorList;
        }
        function setChartData(budget) {

                var labels = [];
                var data = [];
            budget.BudgetItems.forEach(function (budgetItem) {
                    labels.push(budgetItem.ItemName);
                    data.push(budgetItem.TargetAmount);
                });


            var budgetId = `budget${budget.Id}`;
            var budgetChart = document.getElementById(budgetId);
            var colorList = getRandomColorList(labels.length);
            var budgetData = {
                labels: labels,
                datasets: [{
                    data: data,
                    backgroundColor: colorList,

                },
                ],
            }
            var options = {
                onClick: (evt, item) => {

                    chart.update()
                    item[0]._model.outerRadius += 10
                    LoadTransactionsByBudgetItem(item[0]['_model'].label)
                },
            }
            var chart = new Chart(budgetChart, {
                type: 'pie',
                data: budgetData,
                options: options,

            });

        };
        function loadBudgetCharts(budgets) {
            var count = 0;
            $('.budgetCarousel-indicators').empty();
            $('.budgetCarousel-inner').empty();
            budgets.forEach(function (budget) {
                if (budget.BudgetItems != null && budget.BudgetItems.length > 0) {

                        $('.budgetCarousel-indicators').append(
                            `<li data-target="#budgetCarousel" style="background-color: black;"data-slide-to="${count}" ></li>`

                        );
                        $('.budgetCarousel-inner').append(
                            `<div class="carousel-item ">
                                 <h4 class="m-b-0 ">  ${budget.BudgetName}</h4>
                                 <h6 class="m-b-0 m-l-10">Target Spending: ${budget.TargetAmount},   Currnet Total: ${budget.CurrentAmount}</h6>

                                <canvas id="budget${budget.Id}" ></canvas>
                              </div>
                            `

                        );
                        $('.carousel-item').first().addClass('active');
                        $('.carousel-indicators > li').first().addClass('active');
                        $('#budgetCarousel').carousel();
                    setChartData(budget);
                        count++;
                    }

                    });
        }
        //function setBudgetItemsChartData(budgetItems) {

        //    var labels = [];
        //    var data = [];
        //    budgetItems.Transactions.forEach(function (transaction) {
        //        labels.push(budgetItems.ItemName);
        //        data.push(transaction.TargetAmount);
        //    });


        //    var budgetId = `budget${budget.Id}`;
        //    var budgetChart = document.getElementById(budgetId);
        //    var colorList = getRandomColorList(labels.length);
        //    var budgetData = {
        //        labels: labels,
        //        datasets: [{
        //            data: data,
        //            backgroundColor: colorList,

        //        },
        //        ],
        //    }
        //    var options = {
        //        onClick: (evt, item) => {

        //            chart.update()
        //            item[0]._model.outerRadius += 10
        //            //load trasacton.budgetitem inf
        //        },
        //    }
        //    var chart = new Chart(budgetChart, {
        //        type: 'pie',
        //        data: budgetData,
        //        options: options,

        //    });

        //};
        function loadHouseHoldMembers(members) {
            members.forEach(function (member) {
                $('.memberInfo').append(
                    `<div class="row">
                        <div class="col-10">
                            <span ><img src=" ${member.AvatarPath}" alt="user"width="40"class="img-circle" /></Span><span class="m-l-20">${member.FullName}</Span>
                        </div>
                    <div class="col-2">
                    <button value="${member.Id}" class="btn memberBtn"><i class="fa fa-chevron-right"></i></button>
                        </div>

                    </div>
                     <hr/>
                    `
                )
            });
        };
        function loadTransactions(transactions) {
            var table = $('.TransactionsTable').DataTable();
            table.clear().draw();
            transactions.forEach(function (transaction) {
                table.row.add([
                    transaction.Created, transaction.BudgetItemName, transaction.TransactionType, transaction.Amount, transaction.Memo, `<button value="${transaction.Id}" class="btn btn-primary editTransaction" <span><i class="fa fa-pencil-square editTransaction"></i></span></button><button value="${transaction.Id}" class="btn btn-danger deleteTransaction"><span><i class="fa fa-minus"></i></span></button>`


                ]).draw().node().id = transaction.Id;
            })

        };
        function LoadTransactionsByBudgetItem(budgetItemName){
            var url = '@Url.Action("LoadTransactionsByBudgetItem", "HomeTableChart")'
                        $.ajax({
                            type: "POST",
                            url: url,
                            data: JSON.stringify({ 'budgetItemName': budgetItemName }),
                            dataType: 'json',
                            contentType: "application/json; charset=utf-8",
                            success: function (response) {
                                loadTransactions(response);
                            },
                            error: function (response) {
                                console.log(response);
                                alert("Error while inserting data");
                            }
                        });
        }
        function LoadTransactionsByMember(memberId){
            var url = '@Url.Action("LoadTransactionsByMember", "HomeTableChart")'
                        $.ajax({
                            type: "POST",
                            url: url,
                            data: JSON.stringify({ 'memberId': memberId }),
                            dataType: 'json',
                            contentType: "application/json; charset=utf-8",
                            success: function (response) {
                                loadTransactions(response);
                            },
                            error: function (response) {
                                console.log(response);
                                alert("Error while inserting data");
                            }
                        });
        }
        function LoadTransactionsByAccount(accountId){
            var url = '@Url.Action("LoadTransactionsByAccount", "HomeTableChart")'
                        $.ajax({
                            type: "POST",
                            url: url,
                            data: JSON.stringify({ 'accountId': accountId }),
                            dataType: 'json',
                            contentType: "application/json; charset=utf-8",
                            success: function (response) {
                                loadTransactions(response);
                            },
                            error: function (response) {
                                console.log(response);
                                alert("Error while inserting data");
                            }
                        });
        }
        function LoadTransactionsByBudget(budgetId){
            var url = '@Url.Action("LoadTransactionsByBudget", "HomeTableChart")'
                        $.ajax({
                            type: "POST",
                            url: url,
                            data: JSON.stringify({ 'budgetId': budgetId }),
                            dataType: 'json',
                            contentType: "application/json; charset=utf-8",
                            success: function (response) {
                                loadTransactions(response);
                            },
                            error: function (response) {
                                console.log(response);
                                alert("Error while inserting data");
                            }
                        });
        }
        //function clearValidation(entity) {
        //    var inputs = document.getElementById(entity).getElementsByClassName("inputs");
        //    var parent = $(this).closest('div');
        //    parent.removeClass("error");
        //    parent.find(".validationError").remove();
        //}
        function checkIfNumeric(entity) {
            var isValid = true;
            if ($.isNumeric($(entity).val()) != true){
                var parent = $(entity).closest('div');
                parent.addClass("error");
                if (parent.find(".validationError").length === 0) {
                    parent.append('<label  class="text-danger validationError" >This Must be a number.</label>');
                }
                isValid = false;
            }
            return isValid;

        };
        function checkValid(entity) {
            var isValid = true;
            $(entity).each(function () {
                if (!$(this).val() || $(this).val().length === 0 || $(this).val().match(/^ *$/) !== null) {
                    var parent = $(this).closest('div');
                    parent.addClass("error");
                    if (parent.find(".validationError").length === 0) {
                        parent.append('<label  class="text-danger validationError" >This field is required.</label>');
                    }
                    isValid = false;
                }

            })
            return isValid;
        }

        function getTranasctionInfo(transactionId) {
             var url = '@Url.Action("GetTransaction", "HomeTableChart")'
            $.ajax({
                type: "POST",
                url: url,
                data: JSON.stringify({ 'transactionId': transactionId }),
                dataType: 'json',
                contentType: "application/json; charset=utf-8",
                success: function (response) {
                    //console.log(response);
                    $('.AmountText').attr("placeholder", response.Amount);
                    $('.AmountText').val(response.Amount);
                    $('.memoText').attr("placeholder", response.memo);
                    $('.memoText').val(response.Memo);
                    $('#tranactionId').val(response.Id);
                },
                error: function (response) {
                }
            });
        }
        function getBankAccountInfo(bankAccountId) {
            var url = '@Url.Action("GetBankAccount", "HomeTableChart")'
            $.ajax({
                type: "POST",
                url: url,
                data: JSON.stringify({ 'bankAccountId': bankAccountId }),
                dataType: 'json',
                contentType: "application/json; charset=utf-8",
                success: function (response) {
                    $('.BankAccountName').attr("placeholder", response.BankAccountName);
                    $('.BankAccountName').val(response.BankAccountName);
                    $('.StartingBalance').attr("placeholder", response.StartingBalance);
                    $('.StartingBalance').val(response.StartingBalance);
                    $('.WarningBalance').attr("placeholder", response.WarningBalance);
                    $('.WarningBalance').val(response.WarningBalance);
                    $('#bankAccountId').val(response.Id);
                },
                error: function (response) {
                    console.log(response);
                }
            });
        }
        function getBudgetInfo(budgetId) {
            var url = '@Url.Action("GetBudget", "HomeTableChart")'
            $.ajax({
                type: "POST",
                url: url,
                data: JSON.stringify({ 'budgetId': budgetId }),
                dataType: 'json',
                contentType: "application/json; charset=utf-8",
                success: function (response) {
                    $('.BudgetName').attr("placeholder", response.BudgetName);
                    $('.BudgetName').val(response.BudgetName);
                    $('.budgetDescription').attr("placeholder", response.Description);
                    $('.budgetDescription').val(response.Description);
                    $('#budgetId').val(response.Id);
                },
                error: function (response) {
                    console.log(response);
                }
            });
        }
        function getBudgetItemInfo(budgetItemId) {
            var url = '@Url.Action("GetBudgetItem", "HomeTableChart")'
            $.ajax({
                type: "POST",
                url: url,
                data: JSON.stringify({ 'budgetItemId': budgetItemId }),
                dataType: 'json',
                contentType: "application/json; charset=utf-8",
                success: function (response) {
                    $('.BudgetItemName').attr("placeholder", response.ItemName);
                    $('.BudgetItemName').val(response.ItemName);
                    $('.budgetItemDescription').attr("placeholder", response.Description);
                    $('.budgetItemDescription').val(response.Description);
                    $('.budgetItemTargetAmount').attr("placeholder", response.TargetAmount);
                    $('.budgetItemTargetAmount').val(response.TargetAmount);
                    $('#budgetItemId').val(response.Id);
                },
                error: function (response) {
                    console.log(response);
                }
            });
        }

        function deleteTransaction(transactionId) {
            var url = '@Url.Action("DeleteTransaction", "HomeTableChart")'
                        $.ajax({
                            type: "POST",
                            url: url,
                            data: JSON.stringify({ 'transactionId': transactionId }),
                            dataType: 'json',
                            contentType: "application/json; charset=utf-8",
                            success: function (response) {
                                loadHouseHold();
                            },
                            error: function (response) {
                                console.log(response);
                                alert("Error while inserting data");
                            }
                        });
        }
        function deleteBudgetItem(budgetItemId) {
            var url = '@Url.Action("DeleteBudgetItem", "HomeTableChart")'
            $.ajax({
                type: "POST",
                url: url,
                data: JSON.stringify({ 'budgetItemId': budgetItemId }),
                dataType: 'json',
                contentType: "application/json; charset=utf-8",
                success: function (response) {
                    loadHouseHold();
                },
                error: function (response) {
                    console.log(response);
                    alert("Error while inserting data");
                }
            });
        }
        function deleteBudget(budgetId) {
            var url = '@Url.Action("DeleteBudget", "HomeTableChart")'
            $.ajax({
                type: "POST",
                url: url,
                data: JSON.stringify({ 'budgetId': budgetId }),
                dataType: 'json',
                contentType: "application/json; charset=utf-8",
                success: function (response) {
                    loadHouseHold();
                },
                error: function (response) {
                    console.log(response);
                    alert("Error while inserting data");
                }
            });
        }
        function deleteBankAccount(bankAccountId) {
            var url = '@Url.Action("DeleteBankAccount", "HomeTableChart")'
            $.ajax({
                type: "POST",
                url: url,
                data: JSON.stringify({ 'bankAccountId': bankAccountId }),
                dataType: 'json',
                contentType: "application/json; charset=utf-8",
                success: function (response) {
                    loadHouseHold();
                },
                error: function (response) {
                    console.log(response);
                    alert("Error while inserting data");
                }
            });
        }
        function submitTransaction(addOrEdit) {

            if (checkValid('.transactionInput') && checkIfNumeric(".AmountText"))  {
                if (addOrEdit) {
                    var url = '@Url.Action("AddTransaction", "HomeTableChart")'

                }
                else {
                   var url = '@Url.Action("EditTransaction", "HomeTableChart")'
                }
                var Transaction = {
                    Amount: $('.AmountText').val(),
                    Memo: $('.memoText').val(),
                    TransactionType: $('#TransactionType option:selected').val(),
                    BudgetItemId: $('#BudgetsItemsList option:selected').val(),
                    TransactionFile: $('.TransactionFile'),
                    Id: $('#tranactionId').val(),
                }
                $('#addTransaction-modal').modal('toggle');
                $('.AmountText').val('');
                $('.AmountText').attr("placeholder", '');

                $('.memoText').val('');
                $('.memoText').attr("placeholder", '');

                $('#tranactionId').val('');

                $('#transactionSubmit').removeClass("transactionAddSubmit");
                $('#transactionSubmit').removeClass("transactionEditSubmit");

                $.ajax({
                    type: "POST",
                    url: url,
                    data: JSON.stringify({ 'Transaction': Transaction}),
                    dataType: 'json',
                    contentType: "application/json; charset=utf-8",
                    success: function (response) {
                        loadHouseHold();
                    },
                    error: function (response) {
                        alert("Error while inserting data");
                    }

                });
            }
        }
        function submitBudgetItem(addOrEdit) {
            if (checkValid('.budgetItemInput') && checkIfNumeric(".budgetItemTargetAmount")  )  {
                  if (addOrEdit) {
                    var url = '@Url.Action("AddBudgetItem", "HomeTableChart")'
                }
                else {
                     var url = '@Url.Action("EditBudgetItem", "HomeTableChart")'

                }
                console.log($('#BudgetsList option:selected').val());
                var newBudgetItem = {
                    ItemName: $('.BudgetItemName').val(),
                    Description: $('.budgetItemDescription').val(),
                    TargetAmount: $('.budgetItemTargetAmount').val(),
                    BudgetId: $('#BudgetsList option:selected').val(),

                    Id: $('#budgetItemId').val(),
                }
                $('#addBudgetItem-modal').modal('toggle');
                $('.BudgetItemInput').val('');
                $('.BudgetItemInput').attr("placeholder", '');

                $('#budgetItemSubmit').removeClass("budgetItemAddSubmit");
                $('#budgetItemSubmit').removeClass("budgetItemEditSubmit");

                $.ajax({
                    type: "POST",
                    url: url,
                    data: JSON.stringify({ 'newBudgetItem': newBudgetItem }),
                    dataType: 'json',
                    contentType: "application/json; charset=utf-8",
                    success: function (response) {
                        loadHouseHold();
                    },
                    error: function (response) {
                        alert("Error while inserting data");
                    }

                });
            }

        }

        function submitBudget(addOrEdit) {

            if (checkValid('.budgetInput')  )  {
                if (addOrEdit) {
                    var url = '@Url.Action("AddBudget", "HomeTableChart")'
                }
                else {
                     var url = '@Url.Action("EditBudget", "HomeTableChart")'

                }
                var newbudget = {
                    BudgetName: $('.BudgetName').val(),
                    Description: $('.budgetDescription').val(),
                    BankAccountId: $('#AccountList option:selected').val(),
                    Id: $('#budgetId').val(),
                }
                $('#addBudget-modal').modal('toggle');
                $('.BudgetInput').val('');
                $('.BudgetInput').attr("placeholder", '');

                $('#budgetId').val('');
                $('#budgetSubmit').removeClass("budgetAddSubmit");
                $('#budgetSubmit').removeClass("budgetEditSubmit");
                $.ajax({
                    type: "POST",
                    url: url,
                    data: JSON.stringify({ 'newbudget': newbudget }),
                    dataType: 'json',
                    contentType: "application/json; charset=utf-8",
                    success: function (response) {
                        loadHouseHold();
                    },
                    error: function (response) {
                        alert("Error while inserting data");
                    }

                });
            }
        }
        function submitBankAccount(addOrEdit) {
            if (checkValid('.accountInput') && checkIfNumeric(".StartingBalance") && checkIfNumeric(".WarningBalance") )  {
                   if (addOrEdit) {
                    var url = '@Url.Action("AddAccount", "HomeTableChart")'
                }
                else {
                     var url = '@Url.Action("EditBankAccount", "HomeTableChart")'

                }
                var newbankAccount = {
                    BankAccountName: $('.BankAccountName').val(),
                    StartingBalance: $('.StartingBalance').val(),
                    WarningBalance: $('.WarningBalance').val(),
                    BudgetItemId: $('#AccountType option:selected').val(),
                    Id: $('#bankAccountId').val(),


                }
                $('#addBankAccount-modal').modal('toggle');
                $('.accountInput').val('');
                $('.accountInput').attr("placeholder", '');

                $('#bankAccountId').val('');
                $('#bankAccountSubmit').removeClass("bankAccountAddSubmit");
                $('#bankAccountSubmit').removeClass("bankAccountEditSubmit");
                $.ajax({
                    type: "POST",
                    url: url,
                    data: JSON.stringify({ 'newbankAccount': newbankAccount }),
                    dataType: 'json',
                    contentType: "application/json; charset=utf-8",
                    success: function (response) {
                        loadHouseHold();
                    },
                    error: function (response) {
                        alert("Error while inserting data");
                    }

                });
            }
        }
    </script>
}
@* <button value="${transaction.Id}" class="btn btn-primary editTransaction" <span><i class="fa fa-pencil-square editTransaction"></i></span></button>

    //var oldTransactionId;
        //$('.TransactionsTable').on('click', '.editTransaction', function () {

        //    oldTransactionId = $(this).val();
        //    var table = $('TransactionsTable').DataTable();
        //    var row = table.rows($(this).val()).data();
        //    console.log(row);
        //});

        //$('.editTransactionSubmit').on('click', function () {

        //});
*@