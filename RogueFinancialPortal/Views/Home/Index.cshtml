@{
    ViewBag.Title = "Home Page";
}
<div class="row p-t-20 m-l-20 m-r-20">
    <div class="col-lg-4 col-md-6 InfoCard ">
        <div class="card h-100">
            <div class="card-body">
                <h4 class="card-title"> Net Worth</h4>

                <div class="row justify-content-center netWorthDisplay">
                    <h2> This Months Data:</h2>
                    <h3>Expenses: $4300</h3>
                    <h3>Income: $4300</h3>
                    <h3>NetWorth: </h3>
                </div>
            </div>
        </div>
    </div>
    <div class="col-lg-4 col-md-6 AmountSpent ">
        <div class="card h-100">
            <div class="card-body">
                <h4 class="card-title"> Amount Spent This Month</h4>
                <canvas id="budget30"></canvas>

            </div>
        </div>
    </div>
    <div class="col-lg-4 col-md-6 Acounts ">
        <div class="card h-100">
            <div class="card-body AccountsInfo">



            </div>
            <button id="btn-submit" class="btn btn-info" alt="default" data-toggle="modal" data-target="#addAccounts-modal"> <i class="fa fa-user-circle-o"></i> Add Bank Account</button>

        </div>
    </div>

</div>
<div class="row m-l-20 m-t-20  m-r-20  ">
    <div class="col-lg-4 col-md-6 HouseHoldUsers ">
        <div class="card h-100">
            <div class="card-body">
                <h4 class="card-title"> Household Members</h4>
                <div class="memberInfo message-center">

                </div>
                


            </div>
            <button id="btn-submit" class="btn btn-info" alt="default" data-toggle="modal" data-target="#inviteMember-modal"> <i class="fa fa-user-circle-o"></i> Invite Member</button>

        </div>
    </div>
    <div class="col-lg-4 col-md-6 Budgets ">
        <div class="card h-100">
            <div class="card-body ">
                <h4 class="card-title"> Budgets</h4>
                <div class="accordion budgetInfo message-center" id="budgetInfo">


                </div>
            </div>
            <button id="btn-submit" class="btn btn-info" alt="default" data-toggle="modal" data-target="#addBudget-modal"> <i class="fa fa-money"></i> Add Budget</button>

        </div>
    </div>

    <div class="col-lg-4 col-md-6 BudgetsGraphs ">
        <div class="card h-100">
            <div class="card-body">
                <h4 class="card-title"> Budgets</h4>
                <div id="budgetCarousel" class="carousel slide budgetCarousel" data-ride="carousel">
                    <!-- Indicators -->
                    <!-- Wrapper for slides -->
                    <div class="carousel-inner  budgetCarousel-inner" role="listbox">

                    </div>

                    <!-- Left and right controls -->
                    <a class="left carousel-control" href="#budgetCarousel" data-slide="prev">
                        <span class="fa  fa-chevron-left"></span>
                        <span class="sr-only">Previous</span>
                    </a>
                    <a class="right carousel-control" href="#budgetCarousel" data-slide="next">
                        <span class="fa  fa-chevron-right"></span>
                        <span class="sr-only">Next</span>
                    </a>
                </div>
                <ol class="carousel-indicators budgetCarousel-indicators" >
                </ol>
            </div>
        </div>
    </div>
</div>
<div class="row m-l-20 m-t-20 m-r-20">

    <div class="col-lg-8 col-md-10 Transactions ">
        <div class="card">
            <div class="card-body ">
                <h4 class="card-title"> Transactions</h4>
                <div class="table-responsive ">
                    <table id="TransactionsTable" class="TransactionsTable display nowrap table table-hover table-striped table-bordered" cellspacing="0" width="100%">
                        <thead>
                            <tr>

                                <th>Created</th>
                                <th>Budget Item</th>
                                <th>Type</th>
                                <th>Amount</th>
                                <th>Action</th>

                            </tr>
                        </thead>

                    </table>

                </div>

                <button id="btn-submit" class="btn btn-info" alt="default" data-toggle="modal" data-target="#addTransaction-modal"> <i class="fa fa-pencil"></i> Add Transaction</button>
            </div>
        </div>
    </div>
    <div class="col-lg-4 col-md-6 BudgetsItemsGraphs ">
        <div class="card h-100">
            <div class="card-body">
                <h4 class="card-title"> Budget Items</h4>
                <div id="budgetItemCarousel" class="carousel slide budgetItemCarousel" data-ride="carousel">
                    <!-- Indicators -->
                    <!-- Wrapper for slides -->
                    <div class="carousel-inner  budgetItemCarousel-inner" role="listbox">

                    </div>

                    <!-- Left and right controls -->
                    <a class="left carousel-control" href="#budgetItemCarousel" data-slide="prev">
                        <span class="fa  fa-chevron-left"></span>
                        <span class="sr-only">Previous</span>
                    </a>
                    <a class="right carousel-control" href="#budgetItemCarousel" data-slide="next">
                        <span class="fa  fa-chevron-right"></span>
                        <span class="sr-only">Next</span>
                    </a>
                </div>
                <ol class="carousel-indicators budgetItemCarousel-indicators">
                </ol>
            </div>
        </div>
    </div>
</div>

@*graphs*@
<div class="row m-l-20">
</div>
<div id="addTransaction-modal" class="modal fade " tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true" style="display: none;">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">Add Transaction</h4>
                <button type="button" class="close transactionCancel" data-dismiss="modal" aria-hidden="true">×</button>

            </div>
            <div class="modal-body">

                <div class="form-group">
                    <label for="recipient-name" class="control-label">Budget Itmes:</label>
                    @Html.DropDownList("BudgetsItemsList", null, new { @class = "form-control" })
                </div>
                <div class="form-group">
                    <label for="recipient-name" class="control-label">Transaction Type:</label>
                    @Html.DropDownList("TransactionType", (ViewBag.TransactionType as SelectList), htmlAttributes: new { @class = "form-control" })

                </div>
                <div class="form-group">
                    <label for="message-text" class="control-label ">Transaction Amount:</label>
                    <input class="form-control AmountText transactionInput input" id="AmountText" />
                </div>
                <div class="form-group">
                    <label for="message-text" class="control-label ">Memo:</label>
                    <textarea class="form-control memoText transactionInput input" id="memoText"></textarea>
                </div>
                <div class="form-group">
                    <div class="col-xs-12">
                        <label>Avatar Image Upload :</label>
                        <input name="TransactionFile" type="file" class=" dropify form-control" id="TransactionFile" />
                    </div>
                </div>

            </div>
            <div class="modal-footer">
                <button type="button" class="btn transactionCancel btn-default waves-effect waves-light" data-dismiss="modal">Close</button>
                <button type="button" id="transactionSubmit" class="transactionSubmit btn btn-danger waves-effect waves-light">Submit</button>
            </div>
        </div>
    </div>
</div>
<div id="addAccounts-modal" class="modal fade " tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true" style="display: none;">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">Add Account</h4>
                <button type="button" class="close accountAddCancel" data-dismiss="modal" aria-hidden="true">×</button>
                
            </div>
            <div class="modal-body">
                <div class="form-group">
                    <label for="message-text" class="control-label ">Account Name:</label>
                    <input class="form-control BankAccountName accountInput input" id="BankAccountName" />
                </div>

                <div class="form-group">
                    <label for="recipient-name" class="control-label">Account Type:</label>
                    @Html.DropDownList("AccountType", (ViewBag.AccountType as SelectList), htmlAttributes: new { @class = "form-control" })

                </div>
                <div class="form-group">
                    <label for="message-text" class="control-label ">Starting Balance :</label>
                    <input class="form-control StartingBalance accountInput input" id="StartingBalance" />
                </div>

                <div class="form-group">
                    <label for="message-text" class="control-label ">Starting Balance :</label>
                    <input class="form-control WarningBalance accountInput input" id="WarningBalance" />
                </div>

            </div>
            <div class="modal-footer">
                <button type="button" class="btn accountAddCancel btn-default waves-effect waves-light" data-dismiss="modal">Close</button>
                <button type="button" id="accountSubmit" class="accountSubmit btn btn-danger waves-effect waves-light">Submit</button>
            </div>
        </div>
    </div>
</div>
<div id="addBudget-modal" class="modal fade " tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true" style="display: none;">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">Add budget</h4>
                <button type="button" class="close addBudgetCancel" data-dismiss="modal" aria-hidden="true">×</button>
                
            </div>
            <div class="modal-body">
                <div class="form-group">
                    <label for="message-text" class="control-label">Budget Name :</label>
                    <input class="form-control BudgetName budgetInput input" id="BudgetName" />
                </div>

                <div class="form-group">
                    <label for="recipient-name" class="control-label">Account :</label>
                    @Html.DropDownList("AccountList", null, htmlAttributes: new { @class = "form-control" })

                </div>
                

                <div class="form-group">
                    <label for="message-text" class="control-label ">Description :</label>
                    <textarea class="form-control budgetDescription budgetInput input" id="budgetDescription"></textarea> 
                </div>

            </div>
            <div class="modal-footer">
                <button type="button" class="btn addBudgetCancel btn-default waves-effect waves-light" data-dismiss="modal">Close</button>
                <button type="button" id="budgetSubmit" class="budgetSubmit btn btn-danger waves-effect waves-light">Submit</button>
            </div>
        </div>
    </div>
</div>
<div id="addBudgetItem-modal" class="modal fade " tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true" style="display: none;">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">Add Budget Item</h4>
                <button type="button" class="close addBudgetCancel" data-dismiss="modal" aria-hidden="true">×</button>

            </div>
            <div class="modal-body">
                <div class="form-group">
                    <label for="message-text" class="control-label">Item Name :</label>
                    <input class="form-control BudgetItemName budgetItemInput input" id="BudgetItemName" />
                </div>

                <div class="form-group">
                    <label for="recipient-name" class="control-label">Account :</label>
                    @Html.DropDownList("AccountList", null, htmlAttributes: new { @class = "form-control" })

                </div>
                <div class="form-group">
                    <label for="message-text" class="control-label ">Target Amount :</label>
                    <textarea class="form-control budgetItemTargetAmount budgetItemInput input" id="budgetItemTargetAmount"></textarea>
                </div>

                <div class="form-group">
                    <label for="message-text" class="control-label ">Description :</label>
                    <textarea class="form-control budgetItemDescription budgetItemInput input" id="budgetItemDescription"></textarea>
                </div>

            </div>
            <div class="modal-footer">
                <button type="button" class="btn addBudgetItemCancel btn-default waves-effect waves-light" data-dismiss="modal">Close</button>
                <button type="button" id="budgetItemSubmit" class="budgetItemSubmit btn btn-danger waves-effect waves-light">Submit</button>
            </div>
        </div>
    </div>
</div>
<div id="invite-modal" class="modal fade " tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true" style="display: none;">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">Invite a new Member: </h4>
                <button type="button" class="close inviteCancel" data-dismiss="modal" aria-hidden="true">×</button>

            </div>
            <div class="modal-body">
                <div class="form-group">
                    <label for="message-text" class="control-label">Email :</label>
                    <input class="form-control inviteEmail emailInput input" id="inviteEmail" />
                </div>

            </div>
            <div class="modal-footer">
                <button type="button" class="btn inviteCancel btn-default waves-effect waves-light" data-dismiss="modal">Close</button>
                <button type="button" id="inviteSubmit" class="inviteSubmit btn btn-danger waves-effect waves-light">Submit</button>
            </div>
        </div>
    </div>
</div>
@section scripts{
    <script>
        $(document).ready(function () {
            loadHouseHold();
            //load household info
            //load bankaccount
            //load budgets
            //load budgetItems
            $('.TransactionsTable').DataTable({

                dom: 'Bfrtip',
                buttons: [
                    'copy', 'csv', 'excel', 'pdf', 'print'
                ]
            });
        });

        $('.transactionCancel').on('click', function () {
            $('.AmountText').val('');
            $('.memoText').val('');
        });
        $('.transactionSubmit').on('click', function () {
            if (checkValid('.transactionInput') && checkIfNumeric(".AmountText"))  {

                var newTransaction = {
                    Amount: $('.AmountText').val(),
                    Memo: $('.memoText').val(),
                    TransactionType: $('#TransactionType option:selected').val(),
                    BudgetItemId: $('#BudgetsItemsList option:selected').val(),
                    TransactionFile: $('.TransactionFile'),
                }
                var url = '@Url.Action("AddTransaction", "HomeTableChart")'
                $('#addTransaction-modal').modal('toggle');
                $('.AmountText').val('');
                $('.memoText').val('');
                $.ajax({
                    type: "POST",
                    url: url,
                    data: JSON.stringify({ 'newTransaction': newTransaction}),
                    dataType: 'json',
                    contentType: "application/json; charset=utf-8",
                    success: function (response) {
                        loadHouseHold();
                    },
                    error: function (response) {
                        alert("Error while inserting data");
                    }

                });
            }
        });
        $('.TransactionsTable').on('click', '.editTransaction', function () {
            var url = '@Url.Action("editTransaction", "HomeTableChart")'
            var transactionId = $(this).val();
                        $.ajax({
                            type: "POST",
                            url: url,
                            data: JSON.stringify({ 'transactionId': transactionId }),
                            dataType: 'json',
                            contentType: "application/json; charset=utf-8",
                            success: function (response) {
                                console.log(response);
                                loadTransactions(response);
                            },
                            error: function (response) {
                                console.log(response);
                                alert("Error while inserting data");
                            }
                        });
        });

        $('.TransactionsTable').on('click','.deleteTransaction', function () {
            var url = '@Url.Action("deleteTransaction", "HomeTableChart")'
            var transactionId = $(this).val();
                        $.ajax({
                            type: "POST",
                            url: url,
                            data: JSON.stringify({ 'transactionId': transactionId }),
                            dataType: 'json',
                            contentType: "application/json; charset=utf-8",
                            success: function (response) {
                                loadHouseHold();
                            },
                            error: function (response) {
                                console.log(response);
                                alert("Error while inserting data");
                            }
                        });
        });
        $(".input").change(function () {
            var parent = $(this).closest('div');
            parent.removeClass("error");
            parent.find(".validationError").remove();
        });

        $('.accountAddCancel').on('click', function () {
            $('.AmountText').val('');
            $('.memoText').val('');
        });
        $('.accountSubmit').on('click', function () {
            if (checkValid('.accountInput') && checkIfNumeric(".StartingBalance") && checkIfNumeric(".WarningBalance") )  {

                var newAccount = {
                    BankAccountName: $('.BankAccountName').val(),
                    StartingBalance: $('.StartingBalance').val(),
                    WarningBalance: $('.WarningBalance').val(),
                    BudgetItemId: $('#AccountType option:selected').val(),

                }
                var url = '@Url.Action("AddAccount", "HomeTableChart")'
                $('#addAccounts-modal').modal('toggle');
                $('.accountInput').val('');
                $('.StartingBalance').val('');
                $('.WarningBalance').val('');
                $.ajax({
                    type: "POST",
                    url: url,
                    data: JSON.stringify({ 'newAccount': newAccount }),
                    dataType: 'json',
                    contentType: "application/json; charset=utf-8",
                    success: function (response) {
                        loadBankAccounts(response);
                    },
                    error: function (response) {
                        alert("Error while inserting data");
                    }

                });
            }
        });

        $('.budgetAddCancel').on('click', function () {
            $('.BudgetName').val('');
            $('.budgetDescription').val('');
        });
        $('.budgetSubmit').on('click', function () {
            if (checkValid('.budgetInput') && checkIfNumeric(".budgetTargetAmount")  )  {

                var newbudget = {
                    BudgetName: $('.BudgetName').val(),
                    Description: $('.budgetDescription').val(),
                    BankAccontId: $('#AccountList option:selected').val(),
                }
                var url = '@Url.Action("AddBudget", "HomeTableChart")'
                $('#addBudget-modal').modal('toggle');
                $('.BudgetName').val('');
                $('.budgetDescription').val('');
                $.ajax({
                    type: "POST",
                    url: url,
                    data: JSON.stringify({ 'newbudget': newbudget }),
                    dataType: 'json',
                    contentType: "application/json; charset=utf-8",
                    success: function (response) {
                        console.log(response);
                        loadBudgets(response);
                    },
                    error: function (response) {
                        alert("Error while inserting data");
                    }

                });
            }
        });

        $('.addBudgetItemCancel').on('click', function () {
            $('.BudgetItemName').val('');
            $('.budgetItemDescription').val('');
            $('.budgetItemTargetAmount').val('');
        });
        $('.budgetItemSubmit').on('click', function () {
            if (checkValid('.budgetItemInput') && checkIfNumeric(".budgetItemTargetAmount")  )  {

                var newBudgetItem = {
                    ItemName: $('.BudgetItemName').val(),
                    Description: $('.budgetItemDescription').val(),
                    TargetAmount: $('.budgetItemTargetAmount').val(),
                    BudgetId: $('#BudgetList option:selected').val(),
                }
                var url = '@Url.Action("AddBudgetItem", "HomeTableChart")'
                $('#addBudget-modal').modal('toggle');
                $('.BudgetItemName').val('');
                $('.budgetItemDescription').val('');
                $('.budgetItemTargetAmount').val('');

                $.ajax({
                    type: "POST",
                    url: url,
                    data: JSON.stringify({ 'newBudgetItem': newBudgetItem }),
                    dataType: 'json',
                    contentType: "application/json; charset=utf-8",
                    success: function (response) {
                        console.log(response);
                        loadBudgetsItems(response);
                    },
                    error: function (response) {
                        alert("Error while inserting data");
                    }

                });
            }
        });

        $('.inviteCancel').on('click', function () {
            $('.inviteEmail').val('');
           
        });
        $('.inviteSubmit').on('click', function () {
            if (checkValid('.inviteEmail')   )  {              
                var url = '@Url.Action("InviteMember", "HomeTableChart")'
                $('#addBudget-modal').modal('toggle');
                $('.inviteEmail').val('');
                $.ajax({
                    type: "POST",
                    url: url,
                    data: JSON.stringify({ 'email': inviteEmail }),
                    dataType: 'json',
                    contentType: "application/json; charset=utf-8",
                    success: function (response) {
                        console.log(response);
                        loadHouseHoldMembers(response);
                    },
                    error: function (response) {
                        alert("Error while inserting data");
                    }

                });
            }
        });

        function loadHouseHold() {
            var url = '@Url.Action("LoadHouseHold", "HomeTableChart")'
            $.ajax({
                type: 'POST',
                url: url,
                contentType: "application/json; charset=utf-8",
                success: function (response) {
                    //loadnetWorth(response.bankAccounts, response.transactions)
                    loadBankAccounts(response.BankAccounts);
                    loadHouseHoldMembers(response.Members);
                    loadBudgets(response.Budgets);
                    loadBudgetCharts(response.Budgets);
                    loadTransactions(response.Transactions);
                },
                error: function (response) {
                    console.log(response)
                
                    alert("Error while inserting data");
                }
            });
        }
        //function loadNetWorth(bankAccounts, transactions) {
        //    var netWorth = 0;
        //    var expenses = 0;
        //    var income = 0;
        //    bankAccounts.forEach(function (bankAccount) {
        //        netWorth += bankAccount.CurrentBalance;
        //    });
        //    transactions.forEach(function (transaction) {
        //        if(transaction.)
        //        netWorth += bankAccount.CurrentBalance;
        //    });

        //}
        function loadBankAccounts(bankAccounts) {
            $('.AccountsInfo').empty();
            $('.AccountsInfo').append(`<h4 class="card-title"> Accounts</h4>`);
            bankAccounts.forEach(function (bankAccount) {

                $('.AccountsInfo').append(
                    `
                    <div class="row">
                        <div class="col-5">
                     <span >${bankAccount.BankAccountName}</Span>
                        </div>
                       <div class="col-5">
                     <span >${bankAccount.CurrentBalance}</Span>
                        </div>
                        <div class="col-2">
                    <button id="${bankAccount.Id}"class="btn"><i class="fa fa-chevron-right"></i></button>
                        </div>

                    </div>
                     <hr/>
                    `
                )
            });
        };
            //function loadBankAccountCharts();
        function loadBudgets(Budgets) {
            $('.budgetInfo').empty();
            Budgets.forEach(function (budget) {
                if (budget.Description == null) {
                    budget.Description = "No Description Available";
                }
                var budgetRatio = budget.CurrnetAmount / budget.TargetAmount
                var curAmount = `<p class="text-success">${budget.CurrnetAmount}</p>`;
                if (budgetRatio >= .5 && budgetRatio < .9) {
                    curAmount = `<p class="text-warning">${budget.CurrnetAmount}</p>`
                }
                else if (budgetRatio >=.9) {
                    curAmount = `<p class="text-danger">${budget.CurrnetAmount}</p>`
                }
                //var budgetItems;
                //if (budget.BudgetItems == null || budget.BudgetItems.length < 1) {
                //    budgetItems = `<p class="text-warning">No BudgetItems Assigned</p>`
                //}
                //else {
                //    budget.BudgetItems.forEach(function (items) {
                //        budgetItems= (`<div class="row">
                //                    <div class="col-6">
                //                       ${items.CurrnetAmount}
                //                    </div>
                //                     <div class="col-6">
                //                        <span>${items.TargetAmount}</span>
                //                    </div>
                //                </div>`)
                //    });

                //}
                $('.budgetInfo').append(
                    `
                    <div class="card">
                        <div class="card-header" id="heading${budget.Id}">
                            <h2 class="mb-0">
                                <button class="btn" type="button" data-toggle="collapse" data-target="#collapse${budget.Id}" aria-expanded="true" aria-controls="collapse${budget.Id}">
                                    ${budget.BudgetName}
                                </button>
                            </h2>
                        </div>

                        <div id="collapse${budget.Id}" class="collapse" aria-labelledby="heading${budget.Id}" data-parent="#budgetInfo">
                            <div class="card-body">
                                <div class="row ">
                                     <div class="col-6">
                                        <span>Currnet Amount</span>
                                    </div>
                                        <div class="col-6">
                                        <span>Target Amount</span>
                                    </div>
                                </div>

                                 <div class="row">
                                    <div class="col-6">
                                       ${curAmount}
                                    </div>
                                     <div class="col-6">
                                        <span>${budget.TargetAmount}</span>
                                    </div>
                                </div>

                                <div class="row m-l-5">

                                ${budget.Description}
                                </div>

                            </div>
                        </div>
                    </div>`
                )
            });
        };
        function getRandomColorList(length) {
            var colors = [
                'rgba(238, 198, 67',
                'rgba(20, 20, 20)',
                'rgba(13, 33, 161)',
                'rgba(1, 22, 56)',
                'rgba(150, 2, 0)',
                'rgba(206, 108, 71)',
                'rgba(118, 146, 255)',
                'rgba(27, 44, 193)',
                'rgba(84, 101, 255)',
                'rgba(224, 255, 79)'];
            var colorList = [];
            for (var i = 0; i < length; i++) {
                var random = Math.floor(Math.random() * colors.length);
                while (colorList.includes(colors[random])) {
                    random = Math.floor(Math.random() * colors.length);

                }
                colorList.push(colors[random])

            }
            return colorList;
        }
        function setChartData(budget) {

                var labels = [];
                var data = [];
            budget.BudgetItems.forEach(function (budgetItem) {
                    labels.push(budgetItem.ItemName);
                    data.push(budgetItem.TargetAmount);
                });


            var budgetId = `budget${budget.Id}`;
            var budgetChart = document.getElementById(budgetId);
            var colorList = getRandomColorList(labels.length);
            var budgetData = {
                labels: labels,
                datasets: [{
                    data: data,
                    backgroundColor: colorList,

                },
                ],
            }
            //var options = {
            //    onClick: (evt, item) => {

            //        chart.update()
            //        item[0]._model.outerRadius += 10
            //        //load trasacton.budgetitem inf
            //    },
            //}
            var chart = new Chart(budgetChart, {
                type: 'pie',
                data: budgetData,
                //options: options,

            });

        };

        function loadBudgetCharts(budgets) {
            var count = 0;
            $('.budgetCarousel-indicators').empty();
            $('.budgetCarousel-inner').empty();
            budgets.forEach(function (budget) {
                if (budget.budgetItem != null && budget.budgetItem.length > 0) {

                        $('.budgetCarousel-indicators').append(
                            `<li data-target="#budgetCarousel" style="background-color: black;"data-slide-to="${count}" ></li>`

                        );
                        $('.budgetCarousel-inner').append(
                            `<div class="carousel-item ">
                                 <h4 class="m-b-0 ">  ${budget.BudgetName}</h4>
                                 <h6 class="m-b-0 m-l-10">Target Spending: ${budget.CurrnetAmount}</h6>

                                <canvas id="budget${budget.Id}" ></canvas>
                              </div>
                            `

                        );
                        $('.carousel-item').first().addClass('active');
                        $('.carousel-indicators > li').first().addClass('active');
                        $('#budgetCarousel').carousel();
                        setChartData(budget);
                        count++;
                    }

                    });
        }
        function setBudgetItemsChartData(budgetItems) {

            var labels = [];
            var data = [];
            budgetItems.Transactions.forEach(function (transaction) {
                labels.push(budgetItems.ItemName);
                data.push(transaction.TargetAmount);
            });


            var budgetId = `budget${budget.Id}`;
            var budgetChart = document.getElementById(budgetId);
            var colorList = getRandomColorList(labels.length);
            var budgetData = {
                labels: labels,
                datasets: [{
                    data: data,
                    backgroundColor: colorList,

                },
                ],
            }
            //var options = {
            //    onClick: (evt, item) => {

            //        chart.update()
            //        item[0]._model.outerRadius += 10
            //        //load trasacton.budgetitem inf
            //    },
            //}
            var chart = new Chart(budgetChart, {
                type: 'pie',
                data: budgetData,
                //options: options,

            });

        };
        function loadHouseHoldMembers(members) {
            members.forEach(function (member) {
                $('.memberInfo').append(
                    `<div class="row">
                        <div class="col-10">
                            <span ><img src=" ${member.AvatarPath}" alt="user"width="40"class="img-circle" /></Span><span class="m-l-20">${member.FullName}</Span>
                        </div>
                    <div class="col-2">
                    <button id="${member.Id}"class="btn"><i class="fa fa-chevron-right"></i></button>
                        </div>

                    </div>
                     <hr/>
                    `
                )
            });
        };
        function loadTransactions(transactions) {
            var table = $('.TransactionsTable').DataTable();
            table.clear().draw();
            transactions.forEach(function (transaction) {
                table.row.add([
                    transaction.Created, transaction.BudgetItemName, transaction.TransactionType,transaction.Amount, `<button value="${transaction.Id}" class="btn btn-primary "><span><i class="fa fa-pencil-square editTransaction"></i></span></button><button value="${transaction.Id}" class="btn btn-danger deleteTransaction"><span><i class="fa fa-minus"></i></span></button>`


                ]).draw().node().id = transaction.Id;
            })

        };
        //function clearValidation(entity) {
        //    var inputs = document.getElementById(entity).getElementsByClassName("inputs");
        //    var parent = $(this).closest('div');
        //    parent.removeClass("error");
        //    parent.find(".validationError").remove();
        //}
        function checkIfNumeric(entity) {
            var isValid = true;
            if ($.isNumeric($(entity).val()) != true){
                var parent = $(entity).closest('div');
                parent.addClass("error");
                if (parent.find(".validationError").length === 0) {
                    parent.append('<label  class="text-danger validationError" >This Must be a number.</label>');
                }
                isValid = false;
            }
            return isValid;

        };
        function checkValid(entity) {
            var isValid = true;
            $(entity).each(function () {
                if (!$(this).val() || $(this).val().length === 0 || $(this).val().match(/^ *$/) !== null) {
                    var parent = $(this).closest('div');
                    parent.addClass("error");
                    if (parent.find(".validationError").length === 0) {
                        parent.append('<label  class="text-danger validationError" >This field is required.</label>');
                    }
                    isValid = false;
                }

            })
            return isValid;
        }
    </script>
}
